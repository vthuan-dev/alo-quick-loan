import { useState } from "react";
import { api } from "@/lib/api";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { useToast } from "@/contexts/ToastContext";

interface LoanFormProps {
  onSubmit: () => void;
}

export const LoanForm = ({ onSubmit }: LoanFormProps) => {
  const [loanAmount, setLoanAmount] = useState([4500000]);
  const [loanTerm, setLoanTerm] = useState<30 | 40>(30);
  const [fullName, setFullName] = useState("");
  const [phone, setPhone] = useState("");
  const [agreed, setAgreed] = useState(false);
  const [isChecking, setIsChecking] = useState(false);
  const { showError, showSuccess, showInfo } = useToast();

  // B·∫£ng t·ª∑ l·ªá thanh to√°n h√†ng ng√†y theo d·ªØ li·ªáu backend
  const PAYMENT_RATES = {
    30: {
      1000000: 41000,
      1500000: 61500,
      2000000: 82000,
      2500000: 102000,
      3000000: 123000,
      3500000: 143500,
      4000000: 164000,
      4500000: 184500,
      5000000: 205000,
      5500000: 225500,
      6000000: 246000,
      6500000: 266500,
      7000000: 287000,
      7500000: 307500,
      8000000: 328000,
      8500000: 348500,
      9000000: 369000,
      9500000: 389500,
      10000000: 410000,
    },
    40: {
      1000000: 30750,
      1500000: 46125,
      2000000: 61500,
      2500000: 76875,
      3000000: 92250,
      3500000: 107625,
      4000000: 123000,
      4500000: 138375,
      5000000: 153750,
      5500000: 169125,
      6000000: 184500,
      6500000: 199875,
      7000000: 215250,
      7500000: 230625,
      8000000: 246000,
      8500000: 261375,
      9000000: 276750,
      9500000: 292125,
      10000000: 307500,
    }
  };

  const getDailyPayment = (amount: number, term: 30 | 40): number => {
    const rates = PAYMENT_RATES[term];
    
    // T√¨m s·ªë ti·ªÅn g·∫ßn nh·∫•t trong b·∫£ng
    const amounts = Object.keys(rates).map(Number).sort((a, b) => a - b);
    
    // N·∫øu s·ªë ti·ªÅn ch√≠nh x√°c c√≥ trong b·∫£ng
    if (rates[amount]) {
      return rates[amount];
    }
    
    // T√¨m 2 s·ªë ti·ªÅn g·∫ßn nh·∫•t ƒë·ªÉ n·ªôi suy tuy·∫øn t√≠nh
    let lowerAmount = amounts[0];
    let upperAmount = amounts[amounts.length - 1];
    
    for (let i = 0; i < amounts.length - 1; i++) {
      if (amount >= amounts[i] && amount <= amounts[i + 1]) {
        lowerAmount = amounts[i];
        upperAmount = amounts[i + 1];
        break;
      }
    }
    
    // N·ªôi suy tuy·∫øn t√≠nh
    const lowerRate = rates[lowerAmount];
    const upperRate = rates[upperAmount];
    const ratio = (amount - lowerAmount) / (upperAmount - lowerAmount);
    
    return Math.round(lowerRate + (upperRate - lowerRate) * ratio);
  };

  const calculateTotalRepayment = (amount: number, term: 30 | 40): number => {
    const dailyPayment = getDailyPayment(amount, term);
    return dailyPayment * term;
  };

  const calculateTotalInterest = (amount: number, term: 30 | 40): number => {
    const totalRepayment = calculateTotalRepayment(amount, term);
    return totalRepayment - amount;
  };

  const calculateInterestRate = (amount: number, term: 30 | 40): number => {
    const totalInterest = calculateTotalInterest(amount, term);
    return (totalInterest / amount) * 100;
  };

  const getFirstPaymentDate = (term: 30 | 40): string => {
    const today = new Date();
    const firstPaymentDate = new Date(today);
    firstPaymentDate.setDate(today.getDate() + term);
    
    return firstPaymentDate.toLocaleDateString('vi-VN', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };

  const formatCurrency = (amount: number) => {
    return amount.toLocaleString() + " Vnd";
  };

  const handleSubmit = async () => {
    console.log('üöÄ handleSubmit called');
    
    if (!agreed || !fullName || !phone) {
      console.log('‚ùå Validation failed, showing error toast');
      showError(
        "Th√¥ng tin kh√¥ng ƒë·∫ßy ƒë·ªß", 
        "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin v√† ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n"
      );
      return;
    }

    setIsChecking(true);
    try {
      console.log('üîç Checking existing application for phone:', phone);
      // Ki·ªÉm tra h·ªì s∆° t·ªìn t·∫°i
      const existingCheck = await api.checkExistingApplication(phone.replace(/\s+/g, ''));
      console.log('üìã Existing check result:', existingCheck);
      
      if (existingCheck.exists) {
        if (!existingCheck.canContinue) {
          // H·ªì s∆° ƒë√£ ho√†n th√†nh v√† ƒëang ch·ªù x√©t duy·ªát
          console.log('‚ö†Ô∏è Showing warning toast for pending application');
          showInfo(
            "H·ªì s∆° ƒëang ch·ªù x√©t duy·ªát",
            existingCheck.message || "Qu√Ω kh√°ch ƒëang c√≥ h·ªì s∆° ƒëang ch·ªù x√©t duy·ªát, vui l√≤ng th·ª≠ l·∫°i sau"
          );
          setIsChecking(false);
          return;
        } else {
          // H·ªì s∆° c√≥ th·ªÉ ti·∫øp t·ª•c - l∆∞u th√¥ng tin ƒë·ªÉ chuy·ªÉn t·ªõi step ti·∫øp theo
          console.log('‚ÑπÔ∏è Showing info toast for continuing application');
          if (existingCheck.loanApplicationId) {
            localStorage.setItem('loanApplicationId', existingCheck.loanApplicationId);
            localStorage.setItem('existingApplicationStep', existingCheck.currentStep?.toString() || '1');
          }
          
          showInfo(
            "Ti·∫øp t·ª•c h·ªì s∆°",
            existingCheck.message || "Chuy·ªÉn t·ªõi b∆∞·ªõc ti·∫øp theo c·ªßa h·ªì s∆°"
          );
          
          // Chuy·ªÉn t·ªõi step ti·∫øp theo
          onSubmit();
          setIsChecking(false);
          return;
        }
      }

      // Kh√¥ng c√≥ h·ªì s∆° t·ªìn t·∫°i - t·∫°o m·ªõi
      console.log('üÜï Creating new application');
      const payload = {
        fullName,
        phoneNumber: phone.replace(/\s+/g, ''),
        loanAmount: loanAmount[0],
        loanTerm: loanTerm,
      };

      const res = await api.step1(payload);
      
      // L∆∞u loanApplicationId cho RegistrationModal
      localStorage.setItem('loanApplicationId', res.loanApplicationId);
      localStorage.setItem('existingApplicationStep', '1');
      
      console.log('‚úÖ Showing success toast');
      showSuccess(
        "Th√†nh c√¥ng!",
        "B∆∞·ªõc 1 ho√†n th√†nh, chuy·ªÉn t·ªõi b∆∞·ªõc ti·∫øp theo"
      );
      
      onSubmit();
    } catch (e) {
      console.error('üí• Submit failed', e);
      showError(
        "L·ªói g·ª≠i y√™u c·∫ßu",
        "G·ª≠i y√™u c·∫ßu kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i."
      );
    } finally {
      setIsChecking(false);
    }
  };

  const currentDailyPayment = getDailyPayment(loanAmount[0], loanTerm);
  const totalRepayment = calculateTotalRepayment(loanAmount[0], loanTerm);
  const totalInterest = calculateTotalInterest(loanAmount[0], loanTerm);
  const interestRate = calculateInterestRate(loanAmount[0], loanTerm);
  const firstPaymentDate = getFirstPaymentDate(loanTerm);

  return (
    <div className="bg-gradient-hero rounded-2xl p-8 shadow-card-custom text-primary-foreground max-w-6xl mx-auto">
      {/* Promo Banner - Full Width */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold leading-tight mb-2">
          <span className="text-white">0%</span> l√£i su·∫•t cho kh√°ch h√†ng m·ªõi!
        </h1>
        <h2 className="text-3xl font-bold mb-2">
          Nh·∫≠n ti·ªÅn trong <span className="text-accent-red">5 ph√∫t</span> 24/7
        </h2>
        <p className="text-white/80 text-lg">
          109.884 kh√°ch h√†ng ƒë∆∞·ª£c vay online v·ªõi 0% l√£i su·∫•t v√† chi ph√≠
        </p>
      </div>

      <div className="grid lg:grid-cols-2 gap-8 items-start">
        {/* Left Column - Core Loan Info */}
        <div className="space-y-6">
          {/* Loan Amount Slider */}
          <div className="space-y-4">
            <Label className="text-white text-xl font-medium">T√¥i c·∫ßn vay ti·ªÅn</Label>
            <div className="space-y-4">
              <Slider
                value={loanAmount}
                onValueChange={setLoanAmount}
                max={10000000}
                min={500000}
                step={500000}
                className="w-full"
              />
              <div className="flex justify-between text-sm text-white/70">
                <span>500.000 Vnd</span>
                <span className="text-3xl font-bold text-white">{formatCurrency(loanAmount[0])}</span>
                <span>10.000.000 Vnd</span>
              </div>
            </div>
          </div>

          {/* Loan Term Selection */}
          <div className="space-y-3">
            <Label className="text-white text-xl font-medium">K·ª≥ h·∫°n vay</Label>
            <RadioGroup 
              value={loanTerm.toString()} 
              onValueChange={(value) => setLoanTerm(parseInt(value) as 30 | 40)}
              className="flex space-x-6"
            >
              <div className="flex items-center space-x-3">
                <RadioGroupItem value="30" id="term-30" className="w-5 h-5" />
                <Label htmlFor="term-30" className="text-white cursor-pointer text-lg">30 ng√†y</Label>
              </div>
              <div className="flex items-center space-x-3">
                <RadioGroupItem value="40" id="term-40" className="w-5 h-5" />
                <Label htmlFor="term-40" className="text-white cursor-pointer text-lg">40 ng√†y</Label>
              </div>
            </RadioGroup>
          </div>

          {/* Installment Options - Highlighted */}
          <div className="bg-white/20 rounded-xl p-6 border border-white/30">
            <h3 className="text-white font-bold text-xl mb-4 text-center">T√πy ch·ªçn tr·∫£ g√≥p</h3>
            <div className="space-y-3">
              <div className={`text-center p-3 rounded-lg transition-all ${loanTerm === 30 ? 'bg-white text-primary font-bold' : 'bg-white/10 text-white/80'}`}>
                <div className="text-sm">G√≥p 30 ng√†y</div>
                <div className="text-2xl font-bold">{formatCurrency(getDailyPayment(loanAmount[0], 30))}</div>
                <div className="text-xs">/ng√†y</div>
              </div>
              <div className={`text-center p-3 rounded-lg transition-all ${loanTerm === 40 ? 'bg-white text-primary font-bold' : 'bg-white/10 text-white/80'}`}>
                <div className="text-sm">G√≥p 40 ng√†y</div>
                <div className="text-2xl font-bold">{formatCurrency(getDailyPayment(loanAmount[0], 40))}</div>
                <div className="text-xs">/ng√†y</div>
              </div>
            </div>
          </div>
        </div>

        {/* Right Column - Form + Payment Summary */}
        <div className="space-y-6">
          {/* Application Form */}
          <div className="bg-white/95 backdrop-blur-sm rounded-xl p-6 space-y-4 relative z-10">
            <h3 className="text-foreground font-bold text-xl text-center mb-4">Th√¥ng tin ƒëƒÉng k√Ω</h3>
            <div className="space-y-4">
              <div>
                <Label htmlFor="fullName" className="text-foreground font-medium">H·ªç v√† t√™n</Label>
                <Input
                  type="text"
                  id="fullName"
                  value={fullName}
                  onChange={(e) => setFullName(e.target.value)}
                  className="mt-1 relative z-10 pointer-events-auto text-black placeholder:text-gray-500"
                  placeholder="Nh·∫≠p h·ªç v√† t√™n c·ªßa b·∫°n"
                />
              </div>

              <div>
                <Label htmlFor="phone" className="text-foreground font-medium">S·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n</Label>
                <Input
                  type="tel"
                  id="phone"
                  value={phone}
                  onChange={(e) => setPhone(e.target.value)}
                  className="mt-1 relative z-10 pointer-events-auto text-black placeholder:text-gray-500"
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                />
              </div>
            </div>

            <Button 
              onClick={handleSubmit}
              size="xl"
              className="w-full bg-primary hover:bg-primary/90 text-primary-foreground shadow-elegant"
              disabled={!agreed || !fullName || !phone || isChecking}
            >
              {isChecking ? "ƒêang ki·ªÉm tra..." : "ƒêƒÇNG K√ù VAY"}
            </Button>

            <div className="flex items-start space-x-2">
              <Checkbox 
                id="terms"
                checked={agreed}
                onCheckedChange={(checked) => setAgreed(checked as boolean)}
                className="mt-0.5"
              />
              <label htmlFor="terms" className="text-xs text-muted-foreground leading-relaxed">
                B·∫±ng vi·ªác ch·ªçn ·ªü ƒë√¢y, t√¥i x√°c nh·∫≠n r·∫±ng t√¥i ƒë√£ ƒë·ªçc v√† hi·ªÉu ƒë·∫ßy ƒë·ªß c√°c{" "}
                <a href="/terms" className="text-primary underline">ƒëi·ªÅu kho·∫£n</a>, {" "}
                <a href="/conditions" className="text-primary underline">ƒëi·ªÅu ki·ªán</a> v√† ƒë·ªìng √Ω v·ªõi{" "}
                <a href="/privacy" className="text-primary underline">Ch√≠nh s√°ch quy·ªÅn ri√™ng t∆∞</a> ƒë∆∞·ª£c ƒë∆∞a ra b·ªüi ALO 15S.
              </label>
            </div>
          </div>

          {/* Payment Summary */}
          <div className="bg-white/20 rounded-xl p-6 border border-white/30">
            <h3 className="text-white font-bold text-xl mb-4 text-center">T·ªïng quan kho·∫£n vay</h3>
            
            {/* Key Payment Info */}
            <div className="grid grid-cols-2 gap-4 mb-4">
              <div className="text-center">
                <Label className="text-white/70 text-sm">Ng√†y thanh to√°n ƒë·∫ßu ti√™n</Label>
                <p className="text-white font-bold text-lg">{firstPaymentDate}</p>
              </div>
              <div className="text-center">
                <Label className="text-white/70 text-sm">S·ªë ti·ªÅn m·ªói ng√†y</Label>
                <p className="text-white font-bold text-lg">{formatCurrency(currentDailyPayment)}</p>
              </div>
            </div>

            {/* Detailed Breakdown */}
            <div className="space-y-3">
              <div className="flex justify-between text-sm">
                <span className="text-white/70">S·ªë ti·ªÅn vay:</span>
                <span className="text-white font-semibold">{formatCurrency(loanAmount[0])}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-white/70">L√£i su·∫•t:</span>
                <span className="text-white font-semibold">{interestRate.toFixed(1)}%</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-white/70">T·ªïng l√£i:</span>
                <span className="text-white font-semibold">{formatCurrency(totalInterest)}</span>
              </div>
              <hr className="border-white/20" />
              <div className="flex justify-between text-lg font-bold">
                <span className="text-white">T·ªïng tr·∫£:</span>
                <span className="text-white">{formatCurrency(totalRepayment)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};